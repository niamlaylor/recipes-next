generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model recipe {
  id           Int       @id @unique @default(autoincrement()) @db.SmallInt
  userId       String    
  title        String    @db.VarChar
  duration     String?   @db.VarChar
  url          String    @db.VarChar
  ingredients  String[]
  instructions String[]
  img_url      String?   @db.VarChar
  labels       String[]
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  description  String?   @db.VarChar
  favorite     Boolean?  @default(false)
  user         User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// model user {
//   id         Int      @id @unique @db.SmallInt
//   name       String   @default("") @db.VarChar
//   email      String   @unique @default("") @db.VarChar
//   password   String   @default("") @db.VarChar
//   created_at DateTime @default(now()) @db.Timestamptz(6)
//   recipe     recipe[]
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       recipe[]
}

model Account {
  id                 String  @id @default(cuid())
  userId            String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId      String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
